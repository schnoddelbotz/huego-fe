// Code generated by "esc -pkg web -o web/assets.go -private assets"; DO NOT EDIT.

package web

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/app.js": {
		name:    "app.js",
		local:   "assets/app.js",
		size:    1968,
		modtime: 1605724075,
		compressed: `
H4sIAAAAAAAC/+ySQWvbQBCF7/oVryEgCadS6DHBFNqmUCi04D+QjTKytl7vmN2RbTD672VlS1VtlZqc
NSft7NN7w+x3U3uCF6cLuXmMorK2hWi22PCO3A+bGL2s5NuXFIcIAEqSokriLC/YimOT/zzq8hgzdNpW
GSqTimzSH1uDU0DiyG/Yeuqch6VL9PeZFyW1x7v5HB/u78fkoQq2ng1lhpdJ/J155WH0iiAVOcJOeShs
HL8YWmdYHC0/8ys9IMZs1DHU2RDpYzSuktrZy7smumjlOZ72aq1tOxmE9gJt2+8uK/rnEL882yQ9LrXf
46sSdc1SWt3IjGe9pj8NnrFQ4dX7SHLuPPGv9X8NkODJOXZ4eL+I7xD++JMTMpsL1sryStjKcqJtou3N
tL24AI4l7zve7rBVpssYej8vSETbZccabg+nrwbCAyfcHrbKNM/pOLefeuGQXMwQfxSeh1YYYAJ5Avm/
IP8OAAD//68qHAewBwAA
`,
	},

	"/assets/favicon.png": {
		name:    "favicon.png",
		local:   "assets/favicon.png",
		size:    1271,
		modtime: 1599439963,
		compressed: `
H4sIAAAAAAAC/wD3BAj7iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAMAAAD04JH5AAAAM1BMVEUAAAD/
//9AQECAgIAQEBC/v7/v7++fn5/f398wMDBgYGDPz8+Pj49QUFCvr68gICBwcHAvc9MEAAAEf0lEQVR4
nO1byaKjIBBUQDHG7f+/djSaSdM0SwODh7EucxgflE2vhWmaBw8ePPgfsI5yx6hu2l4s7YXpDgpqan94
v+rv/24h+to2QPvvNqhMYGoxZNX9hbV/5UPobAJVTbAS+7dDRQIbRaCd6xFYSAJTPQIDSaDiGZD7t+16
N4F6TuAgUC8QHQQ69kKvWequ+2SV/R8tRxH3d1Qearn1QEhymUFv4dJqV4IT8bvPunescZIIuBOZCeMJ
KEnHMUSvvXZwmCCqLVl1cPcT7xH+mTDcw2oHTkS4kJI+2yMMXwqf7m+A76fIbBwm8Aob37SCAJuZqVZc
bgRfKEhg5G1/YBI/m1nrC6EaySCQsL8Bcn0ReqDc/rSTxxMg+jgeFnLZGTzhbQsVw/1p0O8HfcBrALqL
YcBRanTwiROeA+j3QjQdRclvo5FeGKQkb09GJ4Beb4ZhxahdmaKn14VlwVdBqAhw5Pt1I/OspheGLuDz
QXvNXrqffxH1gn496Np0lFwrWusFRvoVNwuOE4Cu7TsBXD77cNkYTZekXw+erLcrR57VxxTul8FgIx+B
Tzii5APcwZCr+RlQlA3P9hoAxUDsCANHQPt/lXmu3i4OuUCcARp4cnbDO5rH6gsBq42OVpQ21/pqxF7l
DyqUBWL3b9TfPzGHntVKl4E22nyYMcBomoA1UYQONZnATO5gpTVHmnYR4Mzx30g0EhcWSIL742GSoWd9
48ewgDSXiwgq5DOMOf5rbcMHjN5iiBlokdOETfbDFUBmnv2t56upALgWMaTl0w1RmKsrOt5b5GnidoQz
yB8HThQvIY6pJBYKEWAdwioiZQsfrJaYw6AEZkyg+hUD0WfqerJe4xgLqlKgRZWu4o2XazRbIlSxInDI
OqchFinHPbDn4xrwGNKOYU3OhU/Ix8CBQRdIAVkMgFBVhEHSiP4uaQUZ3o9AyasQwdTpLiMUDFaVZISo
WS4W0VrtP2PQKFqCqMjg+PRgctw61GLwgfjhynrrng0XWqwq6YkhvCaKQ8WLSYesX7eHIdIm/1YsD7a0
l1EexfIe2A2QxSDdC6a0SMIpK/l6+pt+uZ9ZWNdziW7oEjrCwI6Y2Bz8WmKH3ukE9oLE62mgaDBv2HE3
79fC3BiSV0AEUjMBGAqYbliIADgDphsVIuCVPH3APpBMAJwBKx0WigJjPGcpAzgVRqvMGEAiYWVDXJPT
CzLoxhlmxCfAzWMAIKfGm8C6bM0QdmTKMlZLkvGlkhFPkcOeNT/kfCxmCNx9TChaF3eZX0oZK4U7bGp8
GrL6ctOfAgrzTM7xeUoBNmjndCjXR06ZPbF9or2esU2V4/uuz+OZgxE9Er8XuZ2j2Sxl59UOcqeSNG3k
h2ypKJNAvlSVRaAv8LFmDoGhxFSaQaDMzxeSCZSSCRMJlBNKkVw/dFLKpQuIVSWlYiPDgVKwik2SPAY7
UWYB7kEUQ3Wkwqn7KvUj40ouDvDiTt/xoxzQXia31ln4GwRRd83/kMAt5j9wNqXdTa9/YN3jvv7vsR48
ePDgTvwBNmUhGUCBzrgAAAAASUVORK5CYIIBAAD//zYHp8j3BAAA
`,
	},

	"/assets/index.tpl.html": {
		name:    "index.tpl.html",
		local:   "assets/index.tpl.html",
		size:    991,
		modtime: 1605724353,
		compressed: `
H4sIAAAAAAAC/3yTT2/cLBDG7/spRiiHN1JitCvlYgGHvD00UtStWqnXCttjQ4LBArzdleXvXmF7/6bt
nljm9zzjeQCmYmvEiimUlVgBALCoo0GhemzcY40wDNkP9EE7O46MzsUZDKXXXYTgS05kCBgDlV2XvQUC
8dAhJxH3kb7JnZxJIhidV4uB0fYdPBpOdOksAeWx5oQuXrXcpe2ssw05dowHg5fmZQhLLf0yj7JUsjD4
GH2PMEDpjPM5NB7RwvgnsJYmXJAeq4VjdOomVozO4bDCVQexmotqLV5l2wVwFgqvq2YK6nOPL19TTGq9
gMMAXtoG4U7bCvcPcGd0oyLkHLLXtAowLv3URgzDXM5ePo1jEi9/v8gWJ9vNEkRvzlMzo8XW5mf6e5QR
s+10XkZfg9+Og+fAQictlEaGwMk5kBubk2Acifh7jdHkJj42rLDom59V33Y5sNJVeDJJomnjLGL0ONj/
zkbvTMjn/aKP0VlwtjS6fOekc7/Qb+1/V4HdE7G1jM6s+Jewrj8q6/pGamSBFzE/+4RbDOE8n7ZdH5O5
SmfMSXFirv0fICodsp00Pd4fX8d0Lwi02nKyJtDKPSebpycCE8bJTdjPXo8jAXpM6uLzhgHQVukirRid
bymj08P+HQAA//+flWzm3wMAAA==
`,
	},

	"/assets/login.tpl.html": {
		name:    "login.tpl.html",
		local:   "assets/login.tpl.html",
		size:    690,
		modtime: 1605721325,
		compressed: `
H4sIAAAAAAAC/0ySz2vcPhDF7/4rXnz5XrLWN/RSWtml9Ac9BLKUlNKjYo0tUa3GlUa7hGX/9yJ7aXKy
mXkzfN486ZvPD58ef+2/wMkhDI2uHwQT576l2NYCGTs0AKAPJAajMymT9O2Px6+7t+21JV4CDd8K4Z5n
H6Fw7+NvKOyNT1D46YzQkZJWm3KbClWTKPStHzm2cImmvlUmZ5KsJnOs5W6Jc/uawIksO/pT/LFvE02J
smsxchSK0rd371FS6KvonVKBRxMcZzmfuz0nuVxUqIAfjAgdFunP5+7j9nu5tFBDo9XmWD+xfR6aRru7
1VdkQeUli2eSG63c3dA8RLhCM+8mQhaTpCy3iFxpJj+XZMRzxOQD4WQylsRHb8mqiUu06LoOmXEiRCIL
YUw+ZcFK+LJYGM9cEjaKU9c0ehk0HYZ9IJMJS6KcIY62mz8VEY7gCOEFPL0MPyVv53XHjVZ0GLRahqZ5
dD5jMTPh5EOAKcK7RIGN7fAQR1o31/HqwPo88pESWZhor6S1kcs4Us5TCbc40X8h4GTSAh+F/zlZyRMN
30uMPs64ZoDXGVTgN//X02hVtU2j1ZaEVusT/RsAAP//D6HWc7ICAAA=
`,
	},

	"/assets": {
		name:  "assets",
		local: `assets`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"assets": {
		_escData["/assets/app.js"],
		_escData["/assets/favicon.png"],
		_escData["/assets/index.tpl.html"],
		_escData["/assets/login.tpl.html"],
	},
}
